#[allow(unused_imports)]
use actix_web::middleware::from_fn;
use actix_web::{HttpRequest, Responder, web};
use himacros::{delete, get, head, post, put, scope};
use hirust_resp::*;

//#[path = "../middlewares/mod.rs"]
//mod middlewares;

#[scope(file = "{{ source_file }}")]
#[allow(dead_code)]
pub fn routes(cfg: &mut web::ServiceConfig) {
    let scope = web::scope("/{{ scope }}"); // 定义路由组
    cfg.service(scope);
}

// middleware = {middlewares::auth::auth}
// auth = false
#[post(path = "/post", desc = "post")]
#[allow(dead_code)]
async fn post(
    req: actix_web::HttpRequest,
) -> impl Responder {
    success_respond_to(&req, Some(String::from("Hey post!")))
}

#[get(path = "/get", desc = "get")]
#[allow(dead_code)]
async fn get(req: HttpRequest) -> impl Responder {
    success_respond_to(&req, Some(String::from("Hey get!")))
}

#[put(path = "/put", desc = "put")]
#[allow(dead_code)]
async fn put(req: HttpRequest) -> impl Responder {
    success_respond_to(&req, Some(String::from("Hey put!")))
}

#[delete(path = "/delete", desc = "delete")]
#[allow(dead_code)]
async fn delete(req: HttpRequest) -> impl Responder {
    success_respond_to(&req, Some(String::from("Hey delete!")))
}

#[head(path = "/head", desc = "head")]
#[allow(dead_code)]
async fn head(req: HttpRequest) -> impl Responder {
    success_respond_to(&req, Some(String::from("Hey head!")))
}